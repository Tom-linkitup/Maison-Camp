/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.38
 * Generated at: 2020-12-30 03:37:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.roomtype.model.*;
import com.roomrsv.model.*;
import java.util.List;

public final class available_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1608636200000L));
    _jspx_dependants.put("jar:file:/Users/tomgu/CEA101_WebApp/CEA101G3/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/CEA101G3/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1064305020000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.roomtype.model");
    _jspx_imports_packages.add("com.roomrsv.model");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      com.roomtype.model.RoomTypeService rmtypeSvc = null;
      rmtypeSvc = (com.roomtype.model.RoomTypeService) _jspx_page_context.getAttribute("rmtypeSvc", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (rmtypeSvc == null){
        rmtypeSvc = new com.roomtype.model.RoomTypeService();
        _jspx_page_context.setAttribute("rmtypeSvc", rmtypeSvc, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\n');

RoomRsvService rsvService = new RoomRsvService();
List<RoomRsvVO> rsvList = rsvService.getAll();
pageContext.setAttribute("rsvList", rsvList);

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css\" />\n");
      out.write("\n");
      out.write("<title>Availability 空房狀況</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<h2 class=\"aval-title\">空房狀況</h2>\n");
      out.write("\t\t<div class=\"close-calendar\">\n");
      out.write("\t\t\t<a href=\"#\"><img src=\"");
      out.print(request.getContextPath());
      out.write("/img/icon/close_icon.svg\"></a>\n");
      out.write("\t\t</div>\n");
      out.write("        <div class=\"condition\">\n");
      out.write("            <h3>\n");
      out.write("                此為\n");
      out.write("                <select name=\"guest\" id=\"guest\">\n");
      out.write("                    <option value=\"2\" selected>2位成人</option>\n");
      out.write("                    <option value=\"3\">3位成人</option>\n");
      out.write("                    <option value=\"4\">4位成人</option>\n");
      out.write("                    <option value=\"5\">5位成人</option>\n");
      out.write("                    <option value=\"6\">6位成人</option>\n");
      out.write("                </select>\n");
      out.write("                ，入住\n");
      out.write("                <select name=\"stay\" id=\"stay\">\n");
      out.write("                    <option value=\"1\">1晚</option>\n");
      out.write("                    <option value=\"2\" selected>2晚</option>\n");
      out.write("                    <option value=\"3\">3晚</option>\n");
      out.write("                    <option value=\"4\">4晚</option>\n");
      out.write("                    <option value=\"5\">5晚</option>\n");
      out.write("                    <option value=\"6\">6晚</option>\n");
      out.write("                    <option value=\"7\">7晚</option>\n");
      out.write("                </select>\n");
      out.write("                每人每晚的價格\n");
      out.write("                <select name=\"rmType\" id=\"rmType\">\n");
      out.write("                \t<option value=\"all\">全部房型</option>\n");
      out.write("                   ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("                </select>\n");
      out.write("            </h3>\n");
      out.write("            <p>Listed price is rate for first night only and is not indicative of average daily rates.</p>\n");
      out.write("        </div>\n");
      out.write("       \n");
      out.write("        <div class=\"view\">\n");
      out.write("            <div id=\"display\"></div>\n");
      out.write("             <div class=\"calendar-backward arrow\">\n");
      out.write("            <i class=\"fas fa-chevron-left\"></i>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"calendar-forward arrow\">\n");
      out.write("            <i class=\"fas fa-chevron-right\"></i>\n");
      out.write("        </div>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"logo\">\n");
      out.write("            <img src=\"");
      out.print(request.getContextPath());
      out.write("/img/logo.png\" alt=\"\" />\n");
      out.write("        </div>\n");
      out.write("        <script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.5.1.min.js\"></script>\n");
      out.write("        <script>\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            let display = document.getElementById(\"display\");\n");
      out.write("            let weeks = [\"ㄧ\", \"二\", \"三\", \"四\", \"五\", \"六\", \"日\"];\n");
      out.write("            let today = new Date();\n");
      out.write("            let thisYear = today.getFullYear();\n");
      out.write("            let thisMonth = today.getMonth();\n");
      out.write("            let todayDate = today.getDate();\n");
      out.write("            let todayStr = thisYear + \"-\" + (thisMonth+1) + \"-\" + todayDate\n");
      out.write("            console.log(todayStr);\n");
      out.write("            let current = 0;\n");
      out.write("            var loaded = [0, 1]\n");
      out.write("            getCalendars(12); //拿一年份的月曆！\n");
      out.write("            fetchAvalibility(current);\n");
      out.write("            fetchAvalibility(current+1);\n");
      out.write("            \n");
      out.write("            function createCalendar(year, month) {\n");
      out.write("                let feb = leapYear(year);\n");
      out.write("                let monthOfDay = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n");
      out.write("                let wrapper = document.createElement(\"div\"); //包住個別日曆\n");
      out.write("                wrapper.classList.add(\"calendar-wrapper\");\n");
      out.write("                let title = document.createElement(\"div\"); //產生日曆標頭\n");
      out.write("                title.classList.add(\"title\");\n");
      out.write("                title.innerHTML = \"<b>\" + (month + 1) + \"月</b><p>\" + \",\" + year + \"年</p>\";\n");
      out.write("                let table = document.createElement(\"table\"); //產生日曆表格\n");
      out.write("                table.classList.add(\"calendar\");\n");
      out.write("                let firstTr = document.createElement(\"tr\"); //產生標頭列\n");
      out.write("                firstTr.classList.add(\"week-title\");\n");
      out.write("\n");
      out.write("                table.append(firstTr);\n");
      out.write("                wrapper.append(title);\n");
      out.write("                wrapper.append(table);\n");
      out.write("                //建立抬頭\n");
      out.write("                for (let i = 0; i < 7; i++) {\n");
      out.write("                    let th = document.createElement(\"th\");\n");
      out.write("                    th.innerText = weeks[i];\n");
      out.write("                    firstTr.append(th);\n");
      out.write("                }\n");
      out.write("                //找出該月第一天是禮拜幾\n");
      out.write("                let firstDayOfWeek = new Date(year, month, 1).getDay();\n");
      out.write("                if (firstDayOfWeek == 0) firstDayOfWeek = 7;\n");
      out.write("                //確認月曆行數\n");
      out.write("                let rows = (monthOfDay[month] + firstDayOfWeek - 1) / 7;\n");
      out.write("                //產生月曆行數\n");
      out.write("                for (let i = 0; i < rows; i++) {\n");
      out.write("                    let tr = document.createElement(\"tr\");\n");
      out.write("                    for (let j = 1; j <= 7; j++) {\n");
      out.write("                        let td = document.createElement(\"td\");\n");
      out.write("                        let a = document.createElement(\"a\");\n");
      out.write("                        let img = document.createElement(\"img\");\n");
      out.write("                        img.setAttribute(\"src\", \"");
      out.print(request.getContextPath());
      out.write("/css/ajax-loader.gif\");\n");
      out.write("                        img.setAttribute(\"style\", \"display:none; width:100%\")\n");
      out.write("                        td.classList.add(\"calendar-td\");\n");
      out.write("                        a.classList.add(\"calendar-box\");\n");
      out.write("                        let id =\n");
      out.write("                            year.toString() + \"-\"\n");
      out.write("                            + (month + 1).toString().padStart(2, \"0\") + \"-\"\n");
      out.write("                            + (i * 7 + j - firstDayOfWeek + 1).toString().padStart(2, \"0\");\n");
      out.write("                        if (i === 0 && j >= firstDayOfWeek) {\n");
      out.write("                            a.setAttribute(\"data-year\", year);\n");
      out.write("                            a.setAttribute(\"data-month\", month + 1);\n");
      out.write("                            a.setAttribute(\"data-date\", j + i * 7 - firstDayOfWeek + 1);\n");
      out.write("                            a.setAttribute(\"id\", id);\n");
      out.write("                        } else if (i * 7 + j - firstDayOfWeek + 1 <= monthOfDay[month]) {\n");
      out.write("                            a.setAttribute(\"data-year\", year);\n");
      out.write("                            a.setAttribute(\"data-month\", month + 1);\n");
      out.write("                            a.setAttribute(\"data-date\", j + i * 7 - firstDayOfWeek + 1);\n");
      out.write("                            a.setAttribute(\"id\", id);\n");
      out.write("                        }\n");
      out.write("                        a.append(img);\n");
      out.write("                        td.append(a);\n");
      out.write("                        tr.append(td);\n");
      out.write("                    }\n");
      out.write("                    table.append(tr);\n");
      out.write("                }\n");
      out.write("                return wrapper;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            function leapYear(year) {\n");
      out.write("                let feb = (year % 4 == 0 && year % 100 != 0) || year % 400 == 0 ? 29 : 28;\n");
      out.write("                return feb;\n");
      out.write("            }\n");
      out.write("            //填充日期資訊\n");
      out.write("            function fillUpDates(year, month, thisMonthDate) {\n");
      out.write("                let feb = leapYear(year);\n");
      out.write("                let monthOfDay = [31, feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n");
      out.write("                for (let i = thisMonthDate; i <= monthOfDay[month]; i++) {\n");
      out.write("                    let celldate = document.createElement(\"div\");\n");
      out.write("                    let cellprice = document.createElement(\"div\");\n");
      out.write("                    cellprice.classList.add(\"calendar-price\");\n");
      out.write("                    celldate.classList.add(\"calendar-date\");\n");
      out.write("                    let id = year.toString() + \"-\" + (month + 1).toString().padStart(2, \"0\") + \"-\" + i.toString().padStart(2, \"0\");\n");
      out.write("                    let hrefstr =\n");
      out.write("                        \"");
      out.print(request.getContextPath());
      out.write("/booking/Available?action=booking\" \n");
      out.write("                        + \"&date=\" + id\n");
      out.write("                        + \"&stay=0\";\n");
      out.write("                    let box = document.getElementById(id);\n");
      out.write("                    box.setAttribute(\"href\", hrefstr);\n");
      out.write("                    box.classList.add(\"calendar-default\");\n");
      out.write("                    celldate.innerText = i;\n");
      out.write("                    box.append(celldate);\n");
      out.write("                    box.append(cellprice);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            \n");
      out.write("            function getCalendars(number) {\n");
      out.write("                for (i = 0; i < number; i++) {\n");
      out.write("                    let thisMonthDate = 1;\n");
      out.write("                    let year = thisYear + Math.floor(thisMonth / 12);\n");
      out.write("                    let month = thisMonth % 12;\n");
      out.write("                    let calendar = createCalendar(year, month);\n");
      out.write("                    display.append(calendar);\n");
      out.write("                    if (i == 0){\n");
      out.write("                        thisMonthDate = todayDate;\n");
      out.write("                    } \n");
      out.write("                    fillUpDates(year, month, thisMonthDate);\n");
      out.write("                    thisMonth++;\n");
      out.write("                }\n");
      out.write("                thisMonth = today.getMonth();\n");
      out.write("                let todaybox = document.getElementById(\n");
      out.write("                           thisYear.toString() + \"-\" \n");
      out.write("                        + (thisMonth + 1).toString().padStart(2, \"0\") + \"-\"\n");
      out.write("                        + today.getDate().toString().padStart(2, \"0\")\n");
      out.write("                );\n");
      out.write("                todaybox.classList.add(\"calendar-today\");\n");
      out.write("\n");
      out.write("                let position = 0;\n");
      out.write("                let forward = $(\".calendar-forward\");\n");
      out.write("                let backward = $(\".calendar-backward\");\n");
      out.write("                let calendars = $(\".calendar-wrapper\");\n");
      out.write("                calendars.eq(0).css(\"opacity\", \"1\");\n");
      out.write("                calendars.eq(1).css(\"opacity\", \"1\");\n");
      out.write("                backward.fadeOut();\n");
      out.write("                //導覽\n");
      out.write("                forward.click(function () {\n");
      out.write("                    current += 1;\n");
      out.write("                    let calendarWidth = parseInt($(\".calendar-wrapper\").css(\"width\").split(\"px\")[0]);\n");
      out.write("                    calendars.css(\"opacity\", \"0\");\n");
      out.write("                    if (0 < number - current) {\n");
      out.write("                        backward.fadeIn(0);\n");
      out.write("                        $(\"#display\").css(\"transform\", \"translateX(-\" + (position += calendarWidth) + \"px)\");\n");
      out.write("                    }\n");
      out.write("                    if (1 === number - current) {\n");
      out.write("                        forward.fadeOut(0);\n");
      out.write("                    }\n");
      out.write("                    calendars.eq(current).css(\"opacity\", \"1\");\n");
      out.write("                    calendars.eq(current + 1).css(\"opacity\", \"1\");\n");
      out.write("                    if (loaded.indexOf(current+1) < 0){\n");
      out.write("                    \tfetchAvalibility(current + 1);\n");
      out.write("                        loaded.push(current+1);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("                backward.click(function () {\n");
      out.write("                    current -= 1;\n");
      out.write("                    let calendarWidth = parseInt($(\".calendar-wrapper\").css(\"width\").split(\"px\")[0]);\n");
      out.write("                    calendars.css(\"opacity\", \"0\");\n");
      out.write("                    if (number - current > 0) {\n");
      out.write("                        forward.fadeIn(0);\n");
      out.write("                        $(\"#display\").css(\"transform\", \"translateX(-\" + (position -= calendarWidth) + \"px)\");\n");
      out.write("                    }\n");
      out.write("                    if (number - current === 12) {\n");
      out.write("                        backward.fadeOut(0);\n");
      out.write("                    }\n");
      out.write("                    calendars.eq(current).css(\"opacity\", \"1\");\n");
      out.write("                    calendars.eq(current + 1).css(\"opacity\", \"1\");\n");
      out.write("                    if (loaded.indexOf(current) < 0){\n");
      out.write("                    \tfetchAvalibility(current);\n");
      out.write("                        loaded.push(current+1);\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("                $(window).resize(function () {\n");
      out.write("                    let CalendarWidth = parseInt($(\".calendar-wrapper\").css(\"width\").split(\"px\")[0]);\n");
      out.write("                    let reposition = CalendarWidth * current;\n");
      out.write("                    position = reposition;\n");
      out.write("                    $(\"#display\").css(\"transform\", \"translateX(-\" + reposition + \"px)\");\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("            var rm_price = {\n");
      out.write("            \t\t");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("            }\n");
      out.write("            function fetchAvalibility(currentCal){\n");
      out.write("                let allDays = $(\".calendar-wrapper\").eq(currentCal).find(\".calendar-default\");\n");
      out.write("                let stayDays = $(\"#stay\").val();\n");
      out.write("                let roomType = $(\"#rmType\").val();\n");
      out.write("                let guests = $(\"#guest\").val();\n");
      out.write("                for (let i = 0 ; i < allDays.length; i++){\n");
      out.write("                \tlet currentDate = allDays.eq(i);\n");
      out.write("                    $.ajax({\n");
      out.write("                         url: \"");
      out.print(request.getContextPath());
      out.write("/booking/Available\",\n");
      out.write("                         data:{\n");
      out.write("                             date: currentDate.attr(\"id\"),\n");
      out.write("                             stay: stayDays,\n");
      out.write("                             rmtype: roomType,\n");
      out.write("                             guest: guests,\n");
      out.write("                             action:\"roomCheck\"\n");
      out.write("                         },\n");
      out.write("                         type: 'POST',\n");
      out.write("                         beforeSend: function() {\n");
      out.write("                        \t currentDate.children(\"img\").show();\n");
      out.write("                          },\n");
      out.write("                         success: function(str){\n");
      out.write("                            var data = JSON.parse(str)\n");
      out.write("        \t\t\t\t\tif(data.isFull == \"true\"){\n");
      out.write("        \t\t\t\t\t\tcurrentDate.addClass(\"calendar-isFull\");\n");
      out.write("        \t\t\t\t\t\t/* currentDate.attr(\"href\",\"\"); */\n");
      out.write("        \t\t\t\t\t} else {\n");
      out.write("        \t\t\t\t\t\tfor (let i = 1; i < 10; i++){\n");
      out.write("        \t\t\t\t\t\t\tif (data[i] != null){\n");
      out.write("        \t\t\t\t\t\t\t\tcurrentDate.children(\".calendar-price\").text(\"$\" + rm_price[i] + \"-\")\n");
      out.write("        \t\t\t\t\t\t\t\tbreak;\n");
      out.write("        \t\t\t\t\t\t\t}\n");
      out.write("        \t\t\t\t\t\t}\n");
      out.write("        \t\t\t\t\t\tcurrentDate.addClass(\"calendar-isEmpty\");\n");
      out.write("        \t\t\t\t\t\tlet length = currentDate.attr(\"href\").length;\n");
      out.write("        \t\t\t\t\t\tlet href = currentDate.attr(\"href\").split(\"stay\")[0] \n");
      out.write("        \t\t\t\t\t\t\t\t\t+ \"stay=\" + $(\"#stay\").val() \n");
      out.write("        \t\t\t\t\t\t\t\t\t+ \"&guest=\" + $(\"#guest\").val();\n");
      out.write("        \t\t\t\t\t\t\n");
      out.write("        \t\t\t\t\t\t\n");
      out.write("        \t\t\t\t\t\t\n");
      out.write("        \t\t\t\t\t\tcurrentDate.attr(\"href\", href);\n");
      out.write("        \t\t\t\t\t}\n");
      out.write("                            currentDate.children(\"img\").hide();\n");
      out.write("                         }\n");
      out.write("                    })\n");
      out.write("                } \n");
      out.write("            }\n");
      out.write("            $(\"#stay\").change(function(){\n");
      out.write("            \tloaded = [current, current+1];\n");
      out.write("            \tfetchAvalibility(current)\n");
      out.write("            \tfetchAvalibility(current+1)\n");
      out.write("            \t $(\".calendar-price\").text(\"\");\n");
      out.write("            \t $(\".calendar-default\").removeClass(\"calendar-isFull calendar-isEmpty\");\n");
      out.write("            })\n");
      out.write("            \n");
      out.write("            $(\"#guest\").change(function(){\n");
      out.write("            \tloaded = [current, current+1];\n");
      out.write("            \tfetchAvalibility(current)\n");
      out.write("            \tfetchAvalibility(current+1)\n");
      out.write("            \t $(\".calendar-price\").text(\"\");\n");
      out.write("            \t $(\".calendar-default\").removeClass(\"calendar-isFull calendar-isEmpty\");\n");
      out.write("            })\n");
      out.write("            \n");
      out.write("            $(\"#rmType\").change(function(){\n");
      out.write("            \tloaded = [current, current+1];\n");
      out.write("            \tfetchAvalibility(current)\n");
      out.write("            \tfetchAvalibility(current+1)\n");
      out.write("            \t $(\".calendar-price\").text(\"\");\n");
      out.write("            \t $(\".calendar-default\").removeClass(\"calendar-isFull calendar-isEmpty\");\n");
      out.write("            })\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /available.jsp(48,19) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("rmtypevo");
      // /available.jsp(48,19) name = items type = java.lang.Object reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rmtypeSvc.getAll()}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                   \t\t<option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rmtypevo.rm_type}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rmtypevo.type_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</option>\n");
            out.write("                   ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /available.jsp(247,14) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("rmtypevo");
      // /available.jsp(247,14) name = items type = java.lang.Object reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems((java.lang.Object) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rmtypeSvc.getAll()}", java.lang.Object.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("            \t\t\t");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rmtypevo.rm_type}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(':');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rmtypevo.rm_price}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(",\n");
            out.write("            \t\t");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }
}
